
PROJECT_NAME = epub-validator

NPM  = npm
NODE = node

JXP  = jx package
JXC  = jx compile

ifeq ($(OS),Windows_NT)
MK   = md
RM   = rd /Q /S
RF   = del /Q /F
CP   = xcopy /Y /S /E /I
MV   = move /Y
else
MK   = mkdir -p
RM   = rm -rf
CP   = cp -r
MV   = mv
endif

help:
	@echo Target List.
	@echo   release: Generate distributions.
	@echo   install: Installs dependencies specified in package.json.
	@echo   uninstall: Delete the temporary folder and installed dependencies.
	@echo   release-clean: Delete the distributions results.
	@echo   os-generated-file-clean: Delete the files generated by OS.
	@echo   clean: executes 'release-clean', 'os-generated-file-clean'.
	@echo   package: Generate jxp.

release: pre-build build post-build

install:
	$(NPM) install

uninstall: temp-clean
	$(RM) node_modules

clean: temp-clean release-clean os-generated-file-clean

temp-clean:
	$(RM) epub-validator-temp
	$(RM) temp
	$(RM) tmp

release-clean:
ifeq ($(OS),Windows_NT)
	$(RF) $(PROJECT_NAME).jxp
	$(RF) $(PROJECT_NAME)
	$(RF) $(PROJECT_NAME).exe
else
	$(RM) $(PROJECT_NAME).jxp
	$(RM) $(PROJECT_NAME)
	$(RM) $(PROJECT_NAME).exe
endif
ifeq ($(wildcard release),)
else
	$(RM) release
endif

os-generated-file-clean:
ifeq ($(OS),Windows_NT)
	$(RF) .DS_Store
	$(RF) .Trashes
	$(RF) ehthumbs.db
	$(RF) Thumbs.db
else
	find . -name '*.DS_Store' -type f -delete
	find . -name '*.Trashes' -type f -delete
	find . -name '*ehthumbs.db' -type f -delete
	find . -name '*Thumbs.db' -type f -delete
endif

package:
	$(JXP) $(PROJECT_NAME).js $(PROJECT_NAME) -native
	$(NODE) lib/jxp.js

pre-build: clean package

build:
	$(JXC) $(PROJECT_NAME).jxp

post-build:
ifeq ($(OS),Windows_NT)
	$(CP) lib\epubcheck release\lib\epubcheck
	@echo Waiting for '$(PROJECT_NAME).exe' generation.
	timeout 10 /NOBREAK
	xcopy $(PROJECT_NAME).exe release
	$(CP) config release\config
	$(CP) db release\db
else
	$(MK) release/lib/epubcheck
	$(CP) lib/epubcheck release/lib
	$(MV) $(PROJECT_NAME) release
	$(CP) config release
	$(CP) db release
endif
